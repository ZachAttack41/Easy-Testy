<!DOCTYPE html>
<html lang="en">
<head>
    <script src="https://cdn.jsdelivr.net/npm/file-saver@2.0.5/dist/FileSaver.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.3/html2pdf.bundle.js"></script>
    <script src="html2pdf.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"
            integrity="sha512-GsLlZN/3F2ErC5ifS5QtgpiJtWd43JWSuIgh7mbzZ8zBps+dvLusV+eNQATqgA/HdeKFVgA5v3S/cIrLF7QnIg=="
            crossorigin="anonymous"
            referrerpolicy="no-referrer"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Anta&display=swap" rel="stylesheet">
</head>
<style>
    .answer-option {
        margin-top: 20px; /* Adjust this value to move the bubbles down */
        display: flex; /* Use flexbox to align items */
        align-items: center; /* Vertically center items */
    }


    .answer-input-container input[type="text"] {
        width: calc(100% + 500px); /* Adjust width */
        padding: 15px; /* Keep padding */
        margin-top: 8px;
        margin-bottom: 15px;
        margin-right: 15px; /* Add margin-right */
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 18px;
    }



    .answer-option {
        margin-top: 10px;
    }

    body {
        font-family: "Anta", sans-serif;
        background-color: #0a1116;
        margin: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: visible;
        flex-direction: column;
    }

    form {
        background-color: #122028;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1), 0 0 20px rgba(255, 255, 255, 0.1);
        max-width: 600px;
        width: 100%;
        text-align: center;
        overflow: visible;
    }

    h1 {
        color: #ffffff;
        font-size: 30px;
        margin-bottom: 20px;
        margin-right: 20px;
        overflow: visible;
    }

    label {
        display: block;
        font-family: "Anta", sans-serif;
        margin-top: -7px;
        margin-right: 15px;
        color: #ffffff;
        font-size: 25px;
    }

    input, select, textarea {
        width: 100%;
        padding: 10px;
        margin-top: 8px;
        margin-bottom: 15px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 16px;
    }

    button {
    background-color: #080683;
    font-family: "Anta", sans-serif;
    color: #fff;
    cursor: pointer;
    font-size: 18px;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    margin-top: 10px;
    transition: background-color 0.3s;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.5); /* Add white shadow */
}

    button:hover {
        background-color: #060559;
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.8); /* Increase shadow on hover */
    }

    #root .new-question textarea {
        height: 100px;
    }

    #root .correct-answer {
        display: inline-block;
        margin-top: 10px;
    }

    #return-to-dashboard {
        background-color: #e74c3c;
        color: #fff;
        cursor: pointer;
        font-size: 18px;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        margin-top: 10px;
        transition: background-color 0.3s;
    }

    #return-to-dashboard:hover {
        background-color: #c0392b;
    }

    #save-test-btn, #add-question-btn, #create-unique-version-btn {
        background-color: #080683;
        color: #fff;
        cursor: pointer;
        font-size: 18px;
        padding: 15px 20px;
        border: none;
        border-radius: 5px;
        margin-top: 10px;
        transition: background-color 0.3s;
        width: 175px;
    }

    #save-test-btn:hover, #add-question-btn:hover, #create-unique-version-btn:hover {
        background-color: #060559;
    }

    #format-test-btn {
        background-color: #080683;
        color: #fff;
        cursor: pointer;
        font-size: 25px;
        padding: 0px 0px;
        border: none;
        margin-right: 20px;
        margin-bottom: 25px;
        transition: background-color 0.3s;
        width: 175px;
        border-radius: 50%;
        height: 50px; 
        line-height: 50px;
    }

    #format-test-btn:hover {
        background-color: #060559;
    }

    .answer-label {
        display: inline-block;
        width: 30px;
        font-size: 16px;
        font-weight: bold;
    }

    .remove-question-btn {
        background-color: #e74c3c;
        color: #fff;
        cursor: pointer;
        font-size: 14px;
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        transition: background-color 0.3s;
    }

    .remove-question-btn:hover {
        background-color: #c0392b;
    }
    #save-test {
    background-color: #084321;
    color: #fff;
    cursor: pointer;
    font-size: 18px;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    margin-top: 10px;
    transition: background-color 0.3s;
    width: 100%;
    }

    #save-test:hover {
        background-color: #063118;
    }

    .popup {
        display: none;
        position: fixed;
        top: 3px;
        left: 50%;
        transform: translateX(-50%);
        background-color: rgba(0, 0, 0, 0.8);
        color: #fff;
        padding: 10px;
        border-radius: 5px;
        z-index: 1000;
        width: 50%;
        max-width: 150px;
        text-align: center;
        font-size: 16px;
    }
    img {
        max-width: 100%;
        height: auto;
        margin-top: 10px;
    }
    .anta-regular {
    font-family: "Anta", sans-serif;
    font-weight: 400;
    font-style: normal;
    }
    .zoomed-in {
    zoom: 150%;
    }

</style>
<body class="zoomed-in">
    <form>
        <h1>Create Test</h1>
        <button id="format-test-btn" onclick="saveAndFormatTest(); return false;">Export</button> 
        <label for="testName">Test Name:</label>
        <input type="text" id="testName" name="testName" placeholder="Name of this test here" required>

        <div id="root"></div>

        <button type="button" id="save-test" onclick="saveTest(); return false;">Save Test</button>
        <button type="button" id="add-question-btn" onclick="createQuestion(); return false;">Add MCQ</button> 
        <button type="button" onclick="shuffleQuestionsAndAnswers(); return false;">Create Unique Version</button>
        <button type="button" id="add-question-btn" onclick="createFreeResponseQuestion(); return false;">Add FRQ</button> 
        <button type="button" id="return-to-dashboard" onclick="returnToDashboard(); return false;">Return to Dashboard</button>
        
        <div id="popup" class="popup"></div>
    </form>
    <script>
        let root = document.getElementById("root");
        let questions = [];

        function createQuestion() {
            questions.push({
                index: questions.length,
                content: "",
                images: [],
                answers: ["", "", "", "", ""],
            });
            render();
        }

        function createFreeResponseQuestion() {
            questions.push({
                index: questions.length,
                content: "",
                images: [],
            });
            render();
        }

        function render() {
            root.innerHTML = "";
            questions.forEach((question) => {
                let questionContainer = document.createElement("div");

                if (question.index === questions.length - 1) {
                    questionContainer.classList.add("new-question");
                }

                let content = document.createElement("textarea");
                content.value = question.content;

                content.addEventListener("input", (e) => {
                    questions[question.index].content = content.value;
                });

                questionContainer.appendChild(content);

                let imageInput = document.createElement("input");
                imageInput.type = "file";
                imageInput.accept = "image/*";
                imageInput.multiple = true;

                imageInput.addEventListener("change", (e) => {
                    const files = e.target.files;
                    const imageURLs = [];

                    for (let i = 0; i < files.length; i++) {
                        imageURLs.push(URL.createObjectURL(files[i]));
                    }

                    questions[question.index].images = imageURLs;
                    render();
                });

                questionContainer.appendChild(imageInput);
                content.placeholder = "Question";
                if (question.images.length > 0) {
                    question.images.forEach((imageURL) => {
                        let image = document.createElement("img");
                        image.src = imageURL;
                        questionContainer.appendChild(image);
                    });
                }

                if (question.answers) {
                    let answersContainer = document.createElement("div"); // Create container for answer input elements
                    answersContainer.classList.add("answer-input-container"); // Add class to container

                    // Track the index of the correct answer
                    let correctAnswerIndex = question.answers.indexOf(question.correctAns);

                    ['0', '1', '2', '3', '4'].forEach((option, index) => {
                        let answerOption = document.createElement("li");
                        answerOption.classList.add("answer-option");

                        let answerInput = document.createElement("input");
                        answerInput.type = "text";
                        answerInput.value = question.answers[index];
                        answerInput.placeholder = "Choice " + String.fromCharCode(65 + index);

                        let correctAnswerRadio = document.createElement("input");
                        correctAnswerRadio.type = "radio";
                        correctAnswerRadio.name = "correctAnswer" + question.index;
                        correctAnswerRadio.value = index;
                        correctAnswerRadio.checked = index === correctAnswerIndex;
                        correctAnswerRadio.classList.add("answer-radio");

                        let answerLabel = document.createElement("label");
                        answerLabel.className = "answer-label";
                        answerLabel.innerHTML = String.fromCharCode(65 + index);

                        answerInput.addEventListener("input", (e) => {
                            questions[question.index].answers[index] = answerInput.value;
                        });

                        correctAnswerRadio.addEventListener("change", () => {
                            correctAnswerIndex = index;
                            questions[question.index].correctAns = question.answers[index];
                        });

                        answerOption.appendChild(correctAnswerRadio);
                        answerOption.appendChild(answerLabel);
                        answerOption.appendChild(answerInput);
                        answersContainer.appendChild(answerOption);
                    });

                    questionContainer.appendChild(answersContainer);
                }

                let removeButton = document.createElement("button");
                removeButton.textContent = "Remove Question";
                removeButton.onclick = function() {
                    questions.splice(question.index, 1);
                    render();
                };

                questionContainer.appendChild(removeButton);

                root.appendChild(questionContainer);
            });
        }


        function shuffleQuestionsAndAnswers() {
            questions = shuffleArray(questions);
            questions.forEach(question => {
                if (question.answers) {
                    question.answers = shuffleArray(question.answers);
                }
            });
            render();
        }


        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        async function formatTest() {
            try {
                const element = document.getElementById("root");
                const images = element.querySelectorAll("img");
                
                const imageDataUrls = await Promise.all(Array.from(images).map(async img => {
                    const response = await fetch(img.src);
                    const blob = await response.blob();
                    return new Promise(resolve => {
                        const reader = new FileReader();
                        reader.onloadend = () => resolve(reader.result);
                        reader.readAsDataURL(blob);
                    });
                }));

                Array.from(images).forEach((img, index) => {
                    img.src = imageDataUrls[index];
                });

                const response = await fetch('/format_test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ formattedTestContent: element.outerHTML }),
                });

                if (response.ok) {
                    alert('Formatted test generated successfully!');
                } else {
                    console.error('Error generating formatted test:', response.status);
                    alert('Error generating formatted test. Please try again.');
                }
            } catch (error) {
                console.error('Error exporting formatted test:', error);
                alert('Error generating formatted test. Please try again.');
            }
        }


        function returnToDashboard() {
            window.location.href = "/dashboard";
        }

        async function saveAndFormatTest() {
            try {
                const testName = document.getElementById("testName").value;

                const response = await fetch("/save_and_format_test", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        testName: testName,
                        questions: questions
                    })
                });

                if (response.ok) {
                    const { testId } = await response.json();
                    const formattedTestUrl = '/formatted_test/' + testId;
                    window.open(formattedTestUrl, '_blank');
                } else {
                    console.error('Error saving and formatting test:', response.status);
                }
            } catch (error) {
                console.error('Error saving and formatting test:', error);
            }
        }

        async function saveTest() {
            const testName = document.getElementById("testName").value;

            const response = await fetch("/save_test", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    testName: testName,
                    questions: questions
                })
            });

            if (response.ok) {
                console.log('Test saved successfully!');
                showPopup("Saved.", true);
                console.log(response);
            } else {
                console.error('Error saving test:', response.status);
                showPopup("Failed to Save Test. Try again later.", false);
            }
        }

        function showPopup(message, isSuccess) {
            const popup = document.getElementById("popup");
            popup.textContent = message;
            popup.style.display = "block";
            popup.style.backgroundColor = isSuccess ? "#27ae60" : "#e74c3c";

            setTimeout(() => {
                popup.style.display = "none";
            }, 3000);
        }

        setInterval(savePage, 300000);

        function savePage() {
            saveTest();
            console.log('Test saved.');
        }
    </script>
</body>
</html>